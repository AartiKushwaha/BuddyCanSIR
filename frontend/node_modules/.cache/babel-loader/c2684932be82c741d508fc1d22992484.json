{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n\nexport const usePagination = _ref => {\n  _s();\n\n  let {\n    totalCount,\n    pageSize,\n    siblingCount = 1,\n    currentPage\n  } = _ref;\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n    const totalPageNumbers = siblingCount + 5;\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["C:/Users/EraComs/Desktop/CODETOGIVE6/frontend/src/components/Pagination/usePagination.js"],"sourcesContent":["import { useMemo } from 'react';\r\n\r\nexport const DOTS = '...';\r\n\r\nconst range = (start, end) => {\r\n  let length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage\r\n}) => {\r\n  const paginationRange = useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n  return paginationRange;\r\n};"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,IAAI,GAAG,KAAb;;AAEP,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;EAC5B,IAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;EACA,OAAOG,KAAK,CAACC,IAAN,CAAW;IAAEF;EAAF,CAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACD,CAHD;;AAKA,OAAO,MAAMO,aAAa,GAAG,QAKvB;EAAA;;EAAA,IALwB;IAC5BC,UAD4B;IAE5BC,QAF4B;IAG5BC,YAAY,GAAG,CAHa;IAI5BC;EAJ4B,CAKxB;EACJ,MAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;IACpC,MAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB;IAEA,MAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;;IAEA,IAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;MACtC,OAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;IACD;;IAED,MAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;IACA,MAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACxBT,WAAW,GAAGD,YADU,EAExBG,cAFwB,CAA1B;IAIA,MAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;IACA,MAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;IAEA,MAAMU,cAAc,GAAG,CAAvB;IACA,MAAMC,aAAa,GAAGX,cAAtB;;IAEA,IAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;MAC9C,IAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;MACA,IAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;MAEA,OAAO,CAAC,GAAGC,SAAJ,EAAe5B,IAAf,EAAqBe,cAArB,CAAP;IACD;;IAED,IAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;MAC9C,IAAIK,cAAc,GAAG,IAAI,IAAIjB,YAA7B;MACA,IAAIkB,UAAU,GAAG7B,KAAK,CACpBc,cAAc,GAAGc,cAAjB,GAAkC,CADd,EAEpBd,cAFoB,CAAtB;MAIA,OAAO,CAACU,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG8B,UAA1B,CAAP;IACD;;IAED,IAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;MAC7C,IAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;MACA,OAAO,CAACI,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG+B,WAA1B,EAAuC/B,IAAvC,EAA6C0B,aAA7C,CAAP;IACD;EACF,CAxC8B,EAwC5B,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CAxC4B,CAA/B;EA0CA,OAAOC,eAAP;AACD,CAjDM;;GAAML,a"},"metadata":{},"sourceType":"module"}